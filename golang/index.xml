<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golangs on Darren Coxall</title>
    <link>http://www.darrencoxall.com/golang/</link>
    <description>Recent content in Golangs on Darren Coxall</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 18 Aug 2014 09:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.darrencoxall.com/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Executing Commands in Go</title>
      <link>http://www.darrencoxall.com/golang/executing-commands-in-go/</link>
      <pubDate>Mon, 18 Aug 2014 09:00:00 +0000</pubDate>
      
      <guid>http://www.darrencoxall.com/golang/executing-commands-in-go/</guid>
      <description>

&lt;p&gt;The ability to execute external commands from within an application is something I often feel is a bit &lt;em&gt;hackish&lt;/em&gt; and I haven&amp;rsquo;t yet discovered a language that handles it as well as I would like. That was until I learned to love how Go tackles the challenge. This post will show you how to make the most of &lt;code&gt;os/exec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I tend to feel that there are three different types of command execution within applications.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plain output. For when you always expect the command to execute but all you want from it is the output.&lt;/li&gt;
&lt;li&gt;Exit codes. These perform some cleanup, setup or check and you want to discard any output but assert the exit code.&lt;/li&gt;
&lt;li&gt;Long running processes. This case is rarer but there are times when I want to spawn sub-processes. Maybe even starting up another server to proxy to for instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So how do I handle these in Go? The magic all comes from the wonderful &lt;a href=&#34;http://godoc.org/os/exec&#34; title=&#34;GoDoc: os/exec&#34;&gt;os/exec&lt;/a&gt; which is part of the Go standard library. Using this library, commands become a first class citizen within your application.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For all examples I am only going to include the primary logic but I will keep a link to a full copy in the Go Playgroud. The copies won&amp;rsquo;t execute within the Playground due to the restrictions Google have in place but they should run fine locally.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have defined the following functions to keep the examples short:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func printCommand(cmd *exec.Cmd) {
  fmt.Printf(&amp;quot;==&amp;gt; Executing: %s\n&amp;quot;, strings.Join(cmd.Args, &amp;quot; &amp;quot;))
}

func printError(err error) {
  if err != nil {
    os.Stderr.WriteString(fmt.Sprintf(&amp;quot;==&amp;gt; Error: %s\n&amp;quot;, err.Error()))
  }
}

func printOutput(outs []byte) {
  if len(outs) &amp;gt; 0 {
    fmt.Printf(&amp;quot;==&amp;gt; Output: %s\n&amp;quot;, string(outs))
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;collecting-output:b15a4def803f966fde627651ff8cb67a&#34;&gt;Collecting output&lt;/h2&gt;

&lt;p&gt;The first and most obvious use is to collect output from an external command. An easy way to do that is to use the &lt;code&gt;CombinedOutput&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Create an *exec.Cmd
cmd := exec.Command(&amp;quot;echo&amp;quot;, &amp;quot;Called from Go!&amp;quot;)

// Combine stdout and stderr
printCommand(cmd)
output, err := cmd.CombinedOutput()
printError(err)
printOutput(output) // =&amp;gt; go version go1.3 darwin/amd64

// http://play.golang.org/p/-7PWDpt6zS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works well if you also want to check for any error messages output but if you want finer control over the output of a command then we can route it into different buffers giving us control over both standard output and standard error.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Create an *exec.Cmd
cmd := exec.Command(&amp;quot;go&amp;quot;, &amp;quot;version&amp;quot;)

// Stdout buffer
cmdOutput := &amp;amp;bytes.Buffer{}
// Attach buffer to command
cmd.Stdout = cmdOutput

// Execute command
printCommand(cmd)
err := cmd.Run() // will wait for command to return
printError(err)
// Only output the commands stdout
printOutput(cmdOutput.Bytes()) // =&amp;gt; go version go1.3 darwin/amd64

// http://play.golang.org/p/_6xke11GMp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example we manually connect our own buffer to capture the commands stdout stream. We can do the same for stderr and even stdin so long as it adheres to the &lt;code&gt;io.Reader&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;So far we&amp;rsquo;ve seen how easy it is to capture command output across multiple file descriptors. It&amp;rsquo;s more verbose then other languages but it gives us lots of flexibility.&lt;/p&gt;

&lt;h2 id=&#34;exit-codes:b15a4def803f966fde627651ff8cb67a&#34;&gt;Exit codes&lt;/h2&gt;

&lt;p&gt;Retrieving the exit code of a command is easy with Go. You may have already noticed in the previous examples that when executing the command Go can return an error. These errors occur if there is an issue with IO or of the command doesn&amp;rsquo;t return a successful exit code (0).&lt;/p&gt;

&lt;p&gt;The following code will output the exit code of a command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmd := exec.Command(&amp;quot;ls&amp;quot;, &amp;quot;/imaginary/directory&amp;quot;)
var waitStatus syscall.WaitStatus
if err := cmd.Run(); err != nil {
  printError(err)
  // Did the command fail because of an unsuccessful exit code
  if exitError, ok := err.(*exec.ExitError); ok {
    waitStatus = exitError.Sys().(syscall.WaitStatus)
    printOutput([]byte(fmt.Sprintf(&amp;quot;%d&amp;quot;, waitStatus.ExitStatus())))
  }
} else {
  // Command was successful
  waitStatus = cmd.ProcessState.Sys().(syscall.WaitStatus)
  printOutput([]byte(fmt.Sprintf(&amp;quot;%d&amp;quot;, waitStatus.ExitStatus())))
}

// http://play.golang.org/p/m2A17UWSOL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code looks more complicated but in traditional Go fashion it handles many situations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create an &lt;code&gt;*exec.Cmd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Execute and test for any errors&lt;/li&gt;
&lt;li&gt;If we received an error then check it was because of the commands exit&lt;/li&gt;
&lt;li&gt;If no error then check the commands &lt;code&gt;*os.ProcessState&lt;/code&gt; for the exit code (pretty much guaranteed to be 0 but in here for completion)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A caveat to take note of is that if Go failed to locate the command in your &lt;code&gt;$PATH&lt;/code&gt; then it won&amp;rsquo;t ever execute the command and thus you will have no exit code. This is why it is important to assert the type of error returned.&lt;/p&gt;

&lt;h2 id=&#34;long-running-processes:b15a4def803f966fde627651ff8cb67a&#34;&gt;Long running processes&lt;/h2&gt;

&lt;p&gt;All our above examples are synchronous. They wait for the command to complete before continuing the execution of our application. If we wanted to execute a long running task however it is likely that we want it to happen asynchronously. Once again this is trivially easy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cmd := exec.Command(&amp;quot;cat&amp;quot;, &amp;quot;/dev/random&amp;quot;)
randomBytes := &amp;amp;bytes.Buffer{}
cmd.Stdout = randomBytes

// Start command asynchronously
err := cmd.Start()
printError(err)

// Create a ticker that outputs elapsed time
ticker := time.NewTicker(time.Second)
go func(ticker *time.Ticker) {
  now := time.Now()
  for _ = range ticker.C {
    printOutput(
      []byte(fmt.Sprintf(&amp;quot;%s&amp;quot;, time.Since(now))),
    )
  }
}(ticker)

// Create a timer that will kill the process
timer := time.NewTimer(time.Second * 4)
go func(timer *time.Timer, ticker *time.Ticker, cmd *exec.Cmd) {
  for _ = range timer.C {
    err := cmd.Process.Signal(os.Kill)
    printError(err)
    ticker.Stop()
  }
}(timer, ticker, cmd)

// Only proceed once the process has finished
cmd.Wait()
printOutput(
  []byte(fmt.Sprintf(&amp;quot;%d bytes generated!&amp;quot;, len(randomBytes.Bytes()))),
)

// http://play.golang.org/p/tQRk1xJOqW
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that was a lot more work but it all makes good sense. I started a computationaly difficult task of generating a collection of random bytes. Next I start that command asynchronously and then begin a ticker to show the elapsed time and a timer to kill the process after 4 seconds. Once the process has been killed then we output the total number of generated bytes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A small disclaimer. I don&amp;rsquo;t claim that this is the best way to do this but it demonstrates asynchronous commands and the ability to send signals to the process within our application.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;closing-comments:b15a4def803f966fde627651ff8cb67a&#34;&gt;Closing comments&lt;/h2&gt;

&lt;p&gt;This has been quite a technical post but we have covered lots of ground with the flexibility of &lt;code&gt;os/exec&lt;/code&gt;. I have tested all the examples on my Mac using go1.3. Any suggestions/improvements are welcomed.&lt;/p&gt;

&lt;p&gt;I hope I&amp;rsquo;ve been able to get across why I&amp;rsquo;m beginning to really enjoy working with Go.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cross Compiling Go Is Easy</title>
      <link>http://www.darrencoxall.com/golang/cross-compiling-go-is-easy/</link>
      <pubDate>Tue, 22 Oct 2013 19:17:00 +0000</pubDate>
      
      <guid>http://www.darrencoxall.com/golang/cross-compiling-go-is-easy/</guid>
      <description>&lt;p&gt;I have found myself spending ever increasing amounts of time developing in Go (golang). Not because I need to, but because it&amp;rsquo;s a refreshing change from my usual. One thing I was interested in however was simply getting my code to work &lt;em&gt;almost&lt;/em&gt; anywhere which is harder with Go seeing as it needs a platform to target.&lt;/p&gt;

&lt;p&gt;Initially I installed Go manually following the instructions on their website. I then started to see an abbreviation cropping up in places that caught my attention. &lt;a href=&#34;https://github.com/moovweb/gvm&#34; title=&#34;Go Version Manager&#34;&gt;GVM (Go Version Manager)&lt;/a&gt;. It is essentially the rbenv to ruby.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t put the installation instructions here. Don&amp;rsquo;t be lazy just click through and have a read it is dead simple. My favourite feature of GVM wasn&amp;rsquo;t the ease of installation as frankly Go is easy to install without it but the fact it rolled up all I needed to cross compile my code without me having to do any looking up. I just hacked together a bash script that would do the job for me.&lt;/p&gt;

&lt;p&gt;First off set-up GVM and then install a version of Go. Then we can install the software required to compile for the various platforms. To do this I wrote the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for GOOS in linux darwin windows
do
  for GOARCH in amd64 386
  do
    gvm cross $GOOS $GOARCH
  done
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once that is complete you should now be able to create a helper script to do the actual compilation. Feel free to customise to your needs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
APPNAME=example
for GOOS in linux darwin windows
do
  for GOARCH in amd64 386
  do
    GO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build -o &amp;quot;bin/$APPNAME$GOOS-$GOARCH&amp;quot; &amp;quot;$APPNAME.go&amp;quot;
  done
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make the script executable and now you should have a very crude way of cross compiling your go projects.&lt;/p&gt;

&lt;p&gt;Remember this isn&amp;rsquo;t meant to be a one size fits all. It got me up and running quickly. There is almost certainly going to be a more comprehensive way of doing this but I didn&amp;rsquo;t need it. All I needed were these few lines of bash and GVM.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting to know Go (Golang)</title>
      <link>http://www.darrencoxall.com/golang/getting-to-know-go/</link>
      <pubDate>Tue, 02 Apr 2013 08:00:00 +0000</pubDate>
      
      <guid>http://www.darrencoxall.com/golang/getting-to-know-go/</guid>
      <description>

&lt;p&gt;Being ever on the lookout for cool technologies, I stumbled upon the wonderful new &lt;em&gt;language&lt;/em&gt; &amp;lsquo;&lt;a href=&#34;http://golang.org/&#34; title=&#34;Golang&#34;&gt;Go&lt;/a&gt;&amp;rsquo;. Developed by Google as a means of combatting the flaws and shortcomings of current languages such as Java and C++ when it comes to highly concurrent requirements.&lt;/p&gt;

&lt;p&gt;Go &lt;em&gt;(or Golang as it is often referred to)&lt;/em&gt; is a strong typed, compiled language. It was built from the ground up for concurrency and thread-safety support. The brilliant standard library utilises this and in doing so makes it extremely easy to  develop concurrent applications.&lt;/p&gt;

&lt;p&gt;There are numerous &lt;em&gt;hard-edge&lt;/em&gt; decisions made with the language including the very C like object system and a unique function visibility system. Go is an object orientated language but the method/function definitions are much more explicit&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// DoSomething operates on an object of type MyObject
// and accepts a string parameter.
// The function will return a boolean.
func (obj MyObject) DoSomething(name string) (bool) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The system used to determine function visibility is also &lt;em&gt;different&lt;/em&gt; to the tried and tested. Functions and variables that begin with a lowercase character are only accessible within their package whereas those beginning with an uppercase character are usable elsewhere.&lt;/p&gt;

&lt;h2 id=&#34;what-am-i-doing-with-go:fe2cccec5024f852eeb2b45cb4bebf66&#34;&gt;What am I doing with Go?&lt;/h2&gt;

&lt;p&gt;I am currently in the process of writing a web application consisting of an API and a JavaScript front-end. I was leaning towards using Ruby on Rails but when I am just creating an API many of the features provided by Rails are un-necessary. It brings with it a larger overhead. I have always been aware of this but it wasn&amp;rsquo;t until I saw a &lt;a href=&#34;http://www.techempower.com/blog/2013/03/28/framework-benchmarks/&#34; title=&#34;Framework Benchmarks&#34;&gt;recent benchmark&lt;/a&gt; that I was encouraged to look elsewhere, after all, I should be selecting the best tool for the job not forcing my favourite tool to do everything. The results of the benchmark gave me an excuse to check out Go.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Before any complaints - I will be the first to say comparing Go to Rails is un-fair. Rails is a framework and Go is a language. I know this but it still allows me to question if a large framework is needed on a project that has just a single JSON API. I decided the answer was No.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;my-opinions-thoughts:fe2cccec5024f852eeb2b45cb4bebf66&#34;&gt;My opinions &amp;amp; thoughts&lt;/h2&gt;

&lt;p&gt;Coming from a Ruby background Go was certainly a big change but I like a good challenge. It is easy to forget how much is handled for you when using a large framework such as Rails. Go does very little for you. Even with a fantastic standard library and brilliant documentation, there is a lot more to be done in Go to create a working web application.&lt;/p&gt;

&lt;p&gt;There is a benefit to working from the core up. You get 100% control over which features you include and how much configuration your application &lt;em&gt;actually&lt;/em&gt; requires. Go will even go as far as formatting your code so the real development time is spent designing and implementing your application. There are no frameworks that you have to work around.&lt;/p&gt;

&lt;p&gt;By developing in this way using Go you can gain massive &lt;a href=&#34;http://blog.iron.io/2013/03/how-we-went-from-30-servers-to-2-go.html&#34; title=&#34;Performance Improvements using Go&#34;&gt;performance improvements&lt;/a&gt; and start leveraging modern hardware using concurrency.&lt;/p&gt;

&lt;p&gt;I am really enjoying Go and I hope to continue developing with it in the future. It doesn&amp;rsquo;t feel like a language designed for traditional web applications such as Rails but it does have many strengths that make it a much better option for more streamlined services.&lt;/p&gt;

&lt;h3 id=&#34;closing-comments:fe2cccec5024f852eeb2b45cb4bebf66&#34;&gt;Closing Comments&lt;/h3&gt;

&lt;p&gt;I hope this article does highlight why as developers we should be looking to constantly learn. We shouldn&amp;rsquo;t have a single language or framework that we believe has everything because it frankly doesn&amp;rsquo;t exist. The best tool is completely opinionated and is determined by the project and the environment in which it is developed.&lt;/p&gt;

&lt;p&gt;Oh… And Go is super cool and quick. Remember that it is a language and isn&amp;rsquo;t designed for just web applications but &lt;em&gt;applications&lt;/em&gt; in general.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; I have created a basic vagrant repository that can help people by installing and preparing a golang environment. Check out &lt;a href=&#34;https://github.com/dcoxall/vagrant-golang&#34; title=&#34;dcoxall/vagrant-golang&#34;&gt;vagrant-golang&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>